1. JavaScript란?
    1) 웹 브라우저에서 사용하기 위해 만들어진 프로그래밍 언어
    2) 웹 브라우저 상에서 UI를 동적으로 보여주기 위해 사용
    3) Node.js 런타임을 통해 서버 쪽에서도 사용할 수 있게 됨
        - Chrome V8 JavaScript 엔진으로 빌드된 JavaScript 런타임
        - 프로그래밍 언어가 동작하는 환경

2. 값과 변수
    1) 주석
        //  한 줄 메모
        /* 한 줄 메모 */

        /**
         *  여러 줄 메모
         *
         */

    2) 변수 선언
        - let 키워드
            변수에 값을 저장
        - const 키워드
            변수의 값을 절대 바꾸지 않는 상황에 사용

3. 데이터 종류(자료형)
    1) Number(숫자)
        - 정수 형식을 따로 제공하지 않음

4. 산술 연산자
    1) /는 연산자와 피연산자가 모두 정수일지라도
       항상 부동 소수점 수를 결과로 반환
       - 1/2 = 0
         1/2 = 0.5
    2) ** 연산자
        - 제곱 계산
    3) +=, ++, --

5. null과 undefined
    1) 값의 부재 표현
    2) undefined 값
        - 변수를 선언했지만 초기화 하지 않은 경우
    3) null값
        - 의도적인 값의 부재를 의미

6. 문자열 리터럴
    1) 작은 따옴표나 큰 따옴표로 문자열 리터럴을 감쌈
        - 'Hello' 또는 "HEllo"

7. 템플릿 리터럴
    1) 표현식을 포함할 수 있음
    2) 백틱(``)으로 구분
    3) ${....}안의 표현식은 평가한 다음, 필요하면 문자열로 변환됨 템플릿으로 합쳐짐
    4) ${....} 표현식 안에 템플릿 리터럴을 중첩할 수 있음
    5) 템플릿 리터럴 안의 모든 개행은 문자열에 포함

8. 객체
    1) 이름/값 또는 프로퍼티의 집합
    2) 공개 데이터만 포함, 캡슐화 불가능, 동작 포함할 수 없음
    3) JavaScript 객체는 특정 클래스의 인스턴스가 아님
    4) 변수에 객체를 저장할 수 있음
        - 점(.) 표기법으로 객체 프로퍼티에 접근 가능
    5) 기존 프로퍼티의 값을 바꾸거나 새 프로퍼티 추가 가능
    6) delete 연산자로 프로퍼티 삭제
        - 존재하지 않는 프로퍼티에 접근하면 undefined 반환

9. 배열
    1) '0', '1', '2' 처럼 프로퍼티 이름이 문자열인 객체
        - 숫자는 프로퍼티 이름으로 사용할 수 없으므로 문자열을 사용
    2) 배열의 요소는 각자 다른 형식을 가질 수 있음
    3) 배열은 요소의 값을 갖지 않기도 함
    4) 모든 객체에서 존재하지 않는 프로퍼티는 undefined 값을 가짐
    5) 배열 끝에 새 요소를 추가할 수 있음
    6) 마지막 쉼표는 요소가 누락되었다는 의미가 아님
       시간이 흐르면서 확장될 수 있음을 의미
    7) 배열은 객체이므로 필요한 프로퍼티를 배열에 추가할 수 있음

10. JSON
    1) JavaScript Object Notation
    2) 애플리케이션 간에 객체 데이터를 주고 받는 경량 텍스트 포맷
    3) 객체, 배열 리터럴을 JavaScript 문법으로 표현
        - 객체 리터럴, 배열 리터럴, 문자열, 소수점 숫자, true, false, null을 값으로 사용
        - 모든 문자열은 큰 따옴표로 구분
        - 모든 프로퍼티 이름은 큰따옴표 구분
        - 맨 끝에 쉼표를 붙일 수 없으며 요소를 생략할 수 없음

    4) JSON 객체의 메소드
        - JSON.stringify(객체, 변환함수, 공백개수)
            - 자바스크립트 객체를 문자로 만듦
        - JSON.parse(문자열)
            - 문자열을 자바스크립트 객체로 파싱

11. 예외란
    1) try...catch...finally 예외처리 기법
        try {
            //정상적으로 처리되어야 할 코드
            // 코드 실행 중 런타임 에러 발생하여 예외가 발생하거나,
        } catch(e) {
            //예외가 발생할 경우에만 실행
        } finally {
            // 무조건 실행
        }