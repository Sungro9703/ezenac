1. static 변수
    1) 공통으로 사용하는 변수가 필요한 경우
        - 여러 인스턴스가 공유하는 기준 값이 필요한 경우
            - 학생마다 새로운 학번 생성
            - 카드회사에서 카드를 새로 발급할때마다 새로운 카드 번호를 부여
            - 회사에 사원이 입사할 때 마다 새로운 사번이 필요한 경우
    2) static int seralNum;
        - 인스턴스가 생성될 때 만들어지는 (인스턴스)변수가 아닌,
          처음 프로그램이 메모리에 로딩될 때 메모리를 할당
        - 클래스 변수, 정적변수
        - 인스턴스 생성과 상관없이 사용 가능
        - 클래스이름.클래스변수
            - 클래스 이름으로 직접 참조

2. static 메서드
    1) 클래스 메서드, 정적 메서드
    2) 인스턴스 생성과 무관하게 클래스 이름으로 호출될 수 있음
    3) 인스턴스 생성 전에 호출될 수 있음
        → static 메서드 내부에서는 인스턴스 변수를 사용할 수 없음.

3. static (초기화) 블럭
    1) static 예약어로 지정된 영역이
        프로그램 실행 전 메모리에 먼저 로드가 되고 실행이 됨
        
4. 변수의 유효 범위와 메모리

    변수 유형                선언위치                             사용범위                             메모리                 생성과 소멸
--------------------------------------------------------------------------------------------------------------------------------------
    지역 변수            함수 내부에 선언                     함수 내부에서만 사용                       스택              함수가 호출될때 생성
   (로컬 변수)                                                                                                           함수가 끝나면 소멸

    멤버 변수          클래스 멤버 변수로 선언                 클래스 내부에서 사용                       힙           인스턴스가 생성될 때 heap에 생성
 (인스턴스 변수)                                     (private 아니면 다른 클래스에서 사용가능)                       가비지 컬렉터가 메모리 수거할 때 소멸

    static 변수     static 사용해 클래스 내부에 선언                   〃                            데이터 영역     프로그램이 처음 시작할 때 상수와 함께 생성
    (클래스 변수)                                                                                                  프로그램 끝나고 메모리 해제할 때 소멸

5. static 응용 - 싱글톤 패턴 (singleton pattern)
    1) 싱글톤 패턴이란?
        - 프로그램에서 인스턴스가 단 한 개만 생성되어야 하는 경우 사용하는 디자인 패턴
        - static 변수, 메서드를 활용하여 구현할 수 있음
    2) 싱글톤을 사용하는 경우
        - 사용자 환경설정, 시간, 날짜 정보, 커넥션 풀
            - 단 하나의 인스턴스만 생성, 사용
    3) 싱글톤 패턴으로 구현하기
        - 생성자는 private로 선언
        - 클래스 내부에 유일한 private 인스턴스 생성
        - 외부에서 유일한 인스턴스를 참조할 수 있는 public 메서드 제공
        
    