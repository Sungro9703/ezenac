0. 자바기초
OOP 입문
OOp 핵심
자바의 유용한 클래스들
자바의 다양한 기능들
자바 미니 프로그램 만들기

1. 자바 개발환경 구축
    1) OpenJDK
    2) 이클립스
        - 괄호 : 소괄호()   중괄호{}    대괄호[]
        
2. 자바 예약어
    1) Keyword
    2) 자바에서 미리 사용하는 단어
    3) 지정한 예약어를 클래스명이나 변수명으로 사용불가

3. 변수 (Variable)
    - 특정 메모리 영역에 할당한 이름
    - 하나의 값을 저장할 수 있는 메모리의 기억공간
    - 프로그램에서는 항상 변하는 값을 나타낼 필요가 있음
        - ex) 학생의 성적, 합계, 게임의 레벨, 회원 주소 ...
    - 표현하려는 수에 맞는 데이터 타입(자료형)을 이용하여 변수를 선언
    - 표현하려는 자료가 숫자, 문자, 문자열 등 다양할 수 있으므로 그에 맞는 자료형 사용.

4. 변수의 이름
    - 영문자 (대문자, 소문자 구분)나 숫자를 사용.
      특수문자 중 $와 _ 만 사용가능.
    - 첫 글자는 숫자로 할 수 없음
    - 예약어는 사용불가
    - 그 용도에 맞고 가독성이 좋게 만드는 것이 중요.
        - int numberOfStudent; , int number_of_student;

5. 자료형 (Data Type)
    1) 변수와 메모리
        - 변수를 선언하면 해당되는 자료형에 크기만큼 메모리가 할당됨
        - 변수는 할당된 메모리를 가리키는 이름
            - int num = 10;     // 4바이트 정수형 메모리가 num이라는 이름으로 할당됨
    
    2) 기본 자료형 (primitive data type)
        - 정수 byte     1byte   동영상, 음악 파일, 실행 파일 자료를 처리할 때 사용
               short    2byte   
               int      4byte   정수의 Default, 프로그램에서 사용하는 모든 숫자는 int로 저장함.
               long     8byte   숫자 뒤에 알파벳 L 또는 l을 써서 long형임을 표기.   
       
        - 실수 float    4byte
               double   8byte   실수의 Default
            - 부동 소수점 방식
            - 실수는 정수보다 정밀하기 때문에 정수와는 다른 방식으로 표현함
            - 컴퓨터에서는 2로 사용
        
        - 문자 char     2byte      
            - 문자도 정수로 표현
            - 어떤 문자를 컴퓨터 내부에서 표현하기 위해 특정 정수 값을 정의
                - 'A' => 65 (encoding)  / 65 => 'A' (decoding)
                       문자가 숫자로 변환 / 숫자에서 다시 문자로 변환
            
            - 문자세트 (character set): 각 문자를 얼마로 표현할 것인지 코드 값을 모아둔 것
                 - ASCII code: 알파벳, 숫자, 특수 문자 등을 1바이트에 표현하는 데 사용하는 문자세트
                 - UNICODE: 전세계 표준으로 만든 문자세트
                    -utf-8: 1바이트에서 4바이트까지 다양하게 문자를 표현
                 - euc-kr 
            - 자바는 문자를 나타내기 위해 전 세계 표준인 UNICODE를 사용
            - 문자를 나타내기 위한 데이터 타입 char ch = 'A'

        - 논리  boolean  1byte  
            - true(참), false(거짓) 두 가지만 표현
            - 값이 존재하는지, 배열이 비었는지, 결과가 참인지 거짓인지 표현

6. 상수와 리터럴, 형변환
    1) 상수 (constant)
        - 변하지 않는 수
        - ex) 원주율 3.14, 1년 12개월 등
        - final 예약어를 이용하여 선언

    2) 리터럴 (literal)
        - 프로그램에서 사용하는 숫자, 문자, 논리값을 뜻함
        - 리터럴은 상수 풀 (constant pool)에 있음
        - 정수 리터럴은 int로
          실수 리터럴은 double로 저장됨

    3) 형변환 (type conversion)
        - 서로 다른 자료형 간에 연산등의 수행을 위해 하나의 자료형으로 통일하는 것
        - 묵시적 형변환 (자동 형변환 explicit ~), 주최: 컴파일러
          명시적 형변환 (강제 형변환 implocit ~), 주최: 프로그래머
        - 바이트 크기가 작은 자료형에서 큰 자료형으로 형변환은 자동으로 이루어짐         
        - 덜 정밀한 자료형에서 더 정밀한 자료형으로 형변환은 자동으로 이루어짐
            - 정수                                 - 실수  
              byte => short => int => long    =>     float => double
        