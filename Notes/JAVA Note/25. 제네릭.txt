1. Generic (무엇이든 담을 수 있는 자료형) 프로그래밍
    1) 변수의 선언, 메서드의 매개변수를 하나의 참조 자료형이 아닌
       여러 자료형으로 변환될 수 있도록 프로그래밍하는 방식
    2) 클래스에서 사용하는 변수의 자료형이 여러개일 수 있고,
       그 기능(메서드)은 동일한 경우 클래스의 자료형을 특정하지 핞고
       추후 해당 클래스를 사용할 때 지정할 수 있도록 선언
    3) 실제 사용되는 자료형의 변환은 컴파일러에 의해 검증되므로
       안정적인 프로그래밍 방식
    4) 컬렉션 프레임워크에서 많이 사용되고 있음

2. 다이아몬드 연산자 <>
     - ex) ArrayList<String> = new ArrayList<>();

3. 자료형 매개변수 T
    1)  여러 참조 자료형으로 대체될 수 있는 부분을 하나의 문자로 표현
    2) E: element, K: key, V: value 등 여러 알파벳을 의미에 따라 사용가능    

        public class GenericPrinter <T>{                    //제네릭 클래스
            private T material;

            public void setMaterial(T material)        
                this.material = material;
        }

        public T getMaterial(){
            return material;
        }

4. <T extends 클래스> 
    1) T 대신에 사용될 자료형을 제한하기 위해 사용
    2) T 자료형의  범위를 제한할 수 있음
    3) 상위 클래스에서 선언하거나 정의하는 메서드를 활용할 수 있음
    4) T에 무작위 클래스가 들어갈 수 없게 상속받은 클래스로 한정

5. 자료형 매개변수가 두 개 이상일 때
    public class Point <T, V> {
        T x;
        V y;

        Point(T x, V y) {
            this.x = x;
            this.y = y;
        }

        public T getX() {       //제네릭 메서드
            return x;
        }
        public V getY() {
            return y;
        }
    }

6. 제네릭 메서드
    1) 자료형 매개변수를 메서드의 매개변수나 반환 값으로 가지는 메서드
    2) 자료형 매개변수가 하나 이상인 경우도 있음
    3) 제네릭 클래스가 아니어도 내부에 제네릭 메서드는 구현하여 사용할 수 있음
    4) 형식
        public <자료형 매개변수> 반환형 메서드이름(자료형 매개변수...) {}
        