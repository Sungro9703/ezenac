1. 보조 스트림
    1) 실제 읽고 쓰는 스트림이 아닌 보조 기능을 제공하는 스트림
    2) FilterInputStream과 FilterOutputStream이 보조 스트림의 상위 클래스들
    3) 생성자의 매개변수로 또 다른 스트림(기반 스트림이나 다른 보조 스트림)을 가짐
        - protected FilterInputStream (InputStream in)
            - 생성자 매개변수로 InputStream을 받음
        - public FilterOutputStream (OutputStream out)
            - 생성자 매개변수로 OutputStream을 받음
    4) decorator pattern으로 구현됨
        : 바이트 단위 파일 입력 스트림 (기반 스트림) + 문자로 변환 기능 추가 (보조 스트림)
          + 버퍼링 기능 추가 (보조 스트림)

    5) BufferedinputStream과 BufferedOutputStream
        1) 약 8192 바이트의 배열을 가지고 있음
            - 입출력이 빠르게 하는 기능이 제공되는 보조 스트림
        2) BufferedinputStream (바이트 기반 버퍼 입력 스트림)
           BufferedOutputStream (바이트 기반 버퍼 출력 스트림)

           BufferedReader (문자 기반 버퍼 입력 스트림)
           BufferedWriter (문자 기반 버퍼 출력 스트림).

4. DataInputStream과 DataOutputStream
    1) 자료가저장된 상태 그대로 자료형을 유지하며 읽거나 쓰는 기능을 제공
    2) DataInputStream 메서드
        - byte readByte ()
            - 1바이트를 읽어 반환
        - boolean readBoolean ()
            - 읽은 자료가 0이 아니면 true를, 0이면 flase를 반환
        - char readChar ()
            - 한 문자를 읽어 반환
        - short readShort ()
            - 2바이트를 읽어 정수 값을 반환
        - int readInt ()
            - 4바이트를 읽어 정수 값을 반환
    3) DataOutputStream 메서드
        - void writeByte (int v)
            - 1바이트의 자료를 출력
        - void writeBoolean (boolean v)
            - 1바이트의 값를 출력
        - void writeUTF (String str)
            - UTF-8 인코딩 기반으로 문자열을 출력

5. 직렬화 (serialization)
    1) 객체의 상태를 그대로 저장하거나 다시 복원하는 것
    2) 자바가상머신의 메모리에 있는 객체 데이터를 바이트 형태로 변환하는 기술
        - 객체 자체를 저장할 수 있음
    3) 인스턴스 상태를 그대로 파일로 저장하거나 네트워크로 전송하고 (serialization)
      이를 다시 복원하는 방식
    4) 자바에서는 보조 스트림을 활용하여 직렬화를 제공
    5) ObjectInputStream과 ObjectOutputStream를 사용하여 파일에 쓰거나 네트워크로 전송 가능
        - ObjectInputStream (InputStream in)
            - InputStream을 생성자의 매개변수로 받아 ObjectInputStream을 생성
        - ObjectOutputStream (OutputStream out)
            - OutputStream을 생성자의 매개변수로 받아 ObjectOutputStream을 생성
    6) 직렬화는 객체의 내용 중 private이 선언된 부분이 있더라도 내용이 외부로 유출
       => 프로그래머가 직렬화 의도를 표시해야 함 
       - java.io.serializable 인터페이스 사용
       - 추상 메서드가 없음 (구현 코드가 없음)
       - 직렬화 의도를 밝히기 위해 인터페이스를 적용하는 것(마커 인터페이스)

6. Decorator pattern
    1) 장식과 실제 내용물을 동일시
        - decorator와 component는 동일한 것은 아님
    2) 객체에 동적으로 책임을 추가
    3) 상속을 사용하지 않고 기능의 유연한 확장이 가능한 패턴
    4) 전체가 아닌 개별적인 객체에 새로운 기능을 추가할 수 있음
    5) 자바의 입출력 스트림은 Decorator pattern
        - 데코레이터는 다른 데코레이터나 또는 컴포넌트를 포함해야 함
        - 기반 스트림 클래스가 직접 읽고 쓸 수 있음. 보조 스트림은 추가적인 기능 제공
    6) 객체 협력(collaborations)
        - component: 동적으로 추가할 서비스를 가질 수 있는 객체 정의
        - ConCreteComponent: 추가적인 서비스가 필요한 실제 객체
        - Decorator: Component의 참조자를 관리하면서 Component에 정의된
                     인터페이스를 만족하도록 정의
        - ConCreteDecorator: 새롭게 추가되는 서비스를 실제 구현한 클래스로 구현
    7) 결론
        - 단순한 상속보다 설계의 융통성 증대
        - Decorator의 조합을 통해 새로운 서비스를 지속적으로 추가할 수 있음
        - 필요 없는 경우 Decorator를 삭제할 수 있음
        - Decorator와 실제 컴포넌트는 동일한 것이 아님
        - 작은 규모의 객체들을 많이 생성할 수 있음
        - 자바의 I/O 스트림 클래스는 Decorator 패턴
        