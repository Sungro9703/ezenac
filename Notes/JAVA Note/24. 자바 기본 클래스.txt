1. 객체 지향 프로그래밍
    1) 추상화(Abstraction)와 일반화
        - 어떤 영역에서 필요로 하는 속성이나 기능을 추출하는 작업
        - 데이터 구조, 표현방법에 대한 추상화
        - 추상화의 의도는 단순화이며, 일반화의 의도는 공통점을 뽑는 것
    2) 캡슐화 (Encapsulation)
        - 데이터를 감싸서 외부에서 사용 가능한 부분만 제공 (information hiding)
        - 사용하는 코드(클라이언트 코드)가 세부적인 사항을 알 필요가 없음
        - private: 나만 볼 수 있는 것, 같은 클래스 내부에서만 접근 가능
    3) 상속 (Inheritance)
        - 일반적인 개념의 객체에서 보다 구체적인 개념의 객체의 관계를 표현
        - 상위 클래스 속성과 기능을 하위 클래스에서 사용하거나 재정의 할 수 있음
    4) 다형성 (Polymorphism)
        - 같은 메시지, 같은 구현에 대해 각 객체가 다른 표현과 결과를 나타내는 것
        - 조상 타입으로 자손 타입의 객체들을 접근할 수 있는 것

2. java.lang 클래스
    0) 프로그래밍 시 import하지 않아도 자동으로 import 됨
       많이 사용하는 기본 클래스들이 속한 패키지
    1) Object
        - 모든 클래스는 상속받음
        - toString() 메서드
            - 생성된 객체의 클래스명과 해시코드 보여줌
            - 보통은 객체 정보를 String으로 바꿔서 사용할 때 많이 사용(재정의)
        - equals() 메서드
    2) String, StringBuffer, StringBuilder
    3) Number, Integer, Long, Float, Double, Character
        - 래퍼 클래스 (Wrapper class)
            - 기본 데이터형 (정수형, 문자형, 논리형)에 대응하는 클래스
            - 기본 자료형에 대해서 객체로서 인식되도록 '포장' 했다는 의미
            - 다양한 메서드 추가
                - 값 변환, 형변환, 진법 변환
                - 상수 (MAX_VALUE, MIN_VALUE)
                - 컬렉션 프레임워크에서 사용
            - 문자열 변환
                - 각각 문자열을 수치형으로 변환하는 메서드
                    - parseByte(): 문자열을 byte형으로 변환
                    - parseshort()
                    - parseint()
                    - parselong()
            - 박싱과 언박싱
                - 기본 타입             래퍼클래스
                    byte                Byte
                    short               Short
                    int                 Integer
                    long                Long
                    float               Float
                    double              Double
                    char                Character
                    boolean             Boolean
    4) System       
    5) Math
        - 모두 static으로 선언됨
    6) Thread

3. 가변인수 (variable length argument)
    1) 인수 개수가 가변적인 것
        - 말줄임표 ...

4. 어노케이션
    1) 자바 소스코드에 추가하여 사용할 수 있는 메타 데이터의 일종
    2) @ 기호를 앞에 붙여 사용함
        - @Override
        - @Deprecated
            - 문제의 발생 소지가 있거나 사용을 권장하지 않음
            - 호환성 유지를 위해 존재하지만 이후에 사라질 수 있는 클래스 또는 메서드
        - @SuppressWarnings
            - Deprecated 관련 경고 등, 특정 메시지를 지정하면 해당 경고 메시지를 출력하지 말라는 의미

5. String 클래스
    1) 선언하는 두가지 방법
        - 문자열 리터럴을 직접 대입하여 만들어진 객체
            - String Constant Pool에 분리하여 따로 관리
        - new 연산자
    2) 문자열형 변수의 참조 비교
        - ==
        - 객체가 가진 문자열의 내용을 비교하는 것이 아니라 같은 객체인지 아닌지 비교
    3) 문자열형 변수의 내용 비교
        - equals()
        - compareTo()
    4) 메서드
        - 문자열 연결
            - concat()
        -문자열에서 문자 찾기
            - indexOf()
        - 문자열 자르기
            -subSting()
        - 지정한 문자 반환
            - char charAt(int index)
        - 문자열 포함여부 확인
            - boolean contain(String s)
        - 시작하는 문자열 s인지 확인
            - boolean starrWith(String s)
        - 문자열 앞뒤에 있는 공백 제거
            -String trim()

6. StringBuilder, StringBuffer
    - 문자열을 여러번 연결하거나, 변경할 때 사용
    1) 기능 동일
    2) 한번 생성된 String은 불변(immutable)
    3) 내부적으로 가변적인 char[]을 멤버변수로 가짐
    4) StringBuffer는 멀티 쓰레드 프로그래밍에서 동기화(Synchronization)를 보장
       StringBuilder는 단일 쓰레드 프로그램에서 사용 권장