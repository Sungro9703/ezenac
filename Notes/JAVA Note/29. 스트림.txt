1. 스트림(Stream)
    1) 의미
        - 데이터의 흐름
        - 데이터 집합체를 반복적으로 처리
        - 데이터 소스(컬렉션, 배열)에서 추출한 연속적인 데이터
        - 스트림을 이용하면 다수의 스레드 코드를 구현하지 않아도 데이터를 병렬로 처리
        - 스트림은 스트림 데이터와 스트림 연산의 개념을 모두 포함

2. 스트림과 컬렉션

                        Collection                      Stream
    1) 처리방식           다운로드                       스트리밍 
    2) 저장공간             필요                          불필요
    3) 반복방식           외부 반복                      내부 반복
    4) 코드구현            명령형                         선언형
    5) 원본데이터           변경                     변경하지 않고 소비
    6) 연산병렬화          어려움                          쉬움

3. 스트림 특징
    1) 자료의 대상과 관계없이 동일한 연산을 수행
       배열, 컬렉션을 대상으로 연산을 수행
       자료 처리에 대한 추상화가 구현되었다고 함
    2) 한번 생성하고 사용한 스트림은 재사용할 수 없음
       자료에 대한 스트림을 생성하여 연산을 수행하면 스트림은 소모됨
       다른연산을 수행하기 위해서는 스트림을 다시 생성해야 함
    3) 자료에 대한 스트림을 생성하면 스트림이 사용하는 메모리 공간은
       별도로 생성되므로 연산이 수행되어도 기존 자료에 대한 변경은 발생하지 않음
    4) 스트림은 중간 연산과 최종 연산으로 구분 됨
        - 중간 연산은 여러 개의 연산이 적용될 수 있지만
          최종 연산은 마지막에 한번만 적용됨

4. 스트림 연산 - 중간 연산
    1) 중간 연산
        - 조건에 맞는 요소를 추출(filter())
        - 조건에 맞는 요소를 변환(map())

        ex) 문자열의 길이가 5 이상인 요소만 출력
            
            스트림 생성                 중간 연산                        최종 연산
            sList.stream().filter(s -> s.length() >= 5).forEach(s -> System.out.println(s));
    
    2) 최종 연산
        - 스트림의 자료를 소모하면서 연산을 수행
        최종 연산 후에 스트림은 더 이상 다른 연산을 적용할 수 없음
        - forEach(): 요소를 하나씩 꺼내 옴
          count(): 요소의 개수
          sum(): 요소의 합
          ...
        