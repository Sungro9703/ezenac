1. GitHub
    1) 협업 시 중요한 개념
        - Git의 원격 저장소 부분
            -Git의 핵심
    2) 원격 저장소 제공
    3) Git을 이용한 프로젝트 종합 관리 가능
    4) 할 수 있는 것 (협업 플랫폼)
        - 개발
        - 일반적인 여러 활동에 사용

2. 포크 (Fork)
    1) 다른 사람의 원격 저장소를 내 계정으로 복사
        - 자유롭게 파일 생성, 수정 반영이 가능

3. 원격 저장소
    1) 원격 저장소 내용을 로컬 저장소로 가져옴.
    2) 로컬 저장소를 원격 저장소와 연결, 보냄, 수정, 병합 등
    3) git clone, git remote, git push, git fetch,git pull
    
4. git clone
    1) 원격 저장소 내용 → 로컬 저장소로 가져오기
    2) GitHub에서 로컬 환경으로 복사하는 것
        - vs 포크(fork): GitHub에서 원격 저장소로 복사
    3) origin
        - 원격 저장소의 별명

5. git remote
    1) 로컬 저장소와 원격 저장소를 연결
    2) 협업
        - 빈 원격 저장소 생성
        - 최소한의 뼈대 프로젝트 생성 (구조 만듦)
        - 협업하는 모두가 원격 저장소를 클론
        - 각자 분담한 작업 진행
    3) git remote add 저장소별칭 원격저장소주소
    4) 원격저장소와 로컬저장소 연결 확인
        - git remote -v

6. git push
    1) 로컬 작업 내역을 원격 저장소에 올리기
    2) 작업 결과물을 개발자들과 공유
    3) 기본적으로 커밋들을 원격 저장소의 main 브랜치에 업로드
    4) 형식
        - git push 원격저장소별칭 로컬브랜치이름
            - git push origin --all
                - --all: 로컬의 모든 브랜치

7. git fetch
    1) 원격 저장소에 다른 개발자들이 커밋할 경우, 내 로컬 저장소와 내용의 차이가 발생
        - 이러한 경우 Git이 push를 불허
        - 로컬 저장소의 커밋들을 원격 저장소와 맞춰야 함 (동기화) = fetch
    2) 작업 순서
        - 로컬로 가져온 커밋들
        - 자신의 기존 로컬 저장소 작업과 병합
        - 원격 저장소에 제출

8. git pull
    1) 원격 저장소 정보(커밋들) 가져오면 (fetch)
    2) 자동으로 로컬 브랜치에 병합까지 수행
        - 어떤 내용이 병합되면서 바뀌게 되는지 알 수 없음