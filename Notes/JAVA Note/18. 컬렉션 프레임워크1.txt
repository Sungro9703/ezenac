1. 자료구조
    1) 대량의 데이터를 효율적으로 관리하는 메커니즘
    2) 예:우편 번호, 학교에서 학생들을 관리하는경우
        - 무작위 명단 → 특정 학생을 찾는 것은 비효율적
        - 학년, 반, 출석번호를 사용하는 체계적인 관리를 통해 특정 학생을 찾는 것이 효율적
    3) 배열
        - 배열은 크기가 고정되어 있어 데이터를 추가하거나 삭제 불가
            - 새로 배열을 만들고 옮겨야 함
    4) 리스트
        - 원소가 원소를 가리켜서 관리하는 자료구조
        - 데이터 추가, 삭제될 때 연결하는 정보만 바꾸면 쉽게 처리 가능
    5) 스택
        - 선형구조(LIFO, Last In First Out)
    6) 큐
        - 선형구조(FIFO, First In First Out)
    7) 트리
        - 부모노드와 자식노드 간의 연결로 이루어진 자료 구조
        - 부모 노드 밑에 여러 자식 노드가 연결되고, 자식 노드 각각에 다시 자식 노드가
          연결되는 형태의 자료구조
        - 이진 검색트리 (binary search tree)
            - 부모노드에 자식노드가 두개 이하인 트리

2. 컬렉션 프레임워크
    1)      Iterable<E>  <---- Collection  <----  List<E>
                                                  Set<E>
                                                  Queue<E>
                                                  Map<K,V>  
    2) List<E>
        - 순서가 있는 데이터 집합
        - 추가된 데이터의 순서도 유지되며, 데이터 중복도 허용
        - 구현 클래스
            - ArrayList
            - LinkedList
            - Vector
            - Stack
    2) List<E> 인터페이스를 구현하는 컬렉션 클래스들
        - ArrayList<E>: 배열기반 자료구조 배열을 이용하여 객체를 저장
            - 데이터가 여러 개 나열된 것을 표현한 것
                - 예) 데이터 목록(List) 좀 뽑아주세요
            - 데이터의 저장 순서 유지
            - 동일 데이터의 중복 저장 허용

3. 객체 배열을 구현한 클래스 ArrayList
    1) 기존 배열
        - 선언과 사용 방식은 배열의 길이를 정하고
          요소의 개수가 배열의 길이보다 커지면
          배열을 재할당하고 복사해야함
            - 배열의 요소를 추가하거나 삭제하면 다른 요소들의 이동에 대한 구현을 해야함
    2) ArrayList
        - 객체 배열을 효율적으로 관리하기 위해 자바에서 제공하는 클래스
        - 주요 메서드
            - boolean add(E e): 요소 하나를 배열에 추가
            - int size(): 배열에 추가된 요소 전체 개수를 반환
            - E get(int index): 배열의 index 위치에 있는 요소 값을 반환
            - E remove(int index): 배열의 index 위치에 있는 요소 값을 제거
            - boolean isEmpty(): 배열이 비어 있는지 확인