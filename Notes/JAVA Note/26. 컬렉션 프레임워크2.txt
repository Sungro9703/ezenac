1. 컬렉션 프레임워크
    1) 프로그램 구현에 필요한 자료구조와 알고리즘을 구현해 놓은 라이브러리
    2) java.util 패키지에 구현되어 있음
    3) 개발에 소요되는 시간을 절약하고 최적화된 라이브러리를 사용할 수 있음
    4) Collection 인터페이스와 Map 인터페이스로 구성됨

2. Collection 인터페이스
    1) 하나의 객체의 관리를 위해 선언된 인터페이스
    2) 필요한 기본 메서드가 선언되어 있음
    3) 하위에 List, Set 인터페이스가 있음
        - List 인터페이스
            - 순서가 있는 자료 관리, 중복허용
                - 객체를 순서에 따라 저장하고 관리하는데 필요한 메서드가 선언된 인터페이스
            - 배열의 기능을 구현하기 위한 메서드가 선언됨
            - 구현한 클래스
                - ArrayList, Vector, LinkedList, Stack Queue 등이 있음.
        - Set 인터페이스
            - 순서가 정해져 있지 않음, 중복을 허용하지 않음
                - 멤버의 중복 여부를 체크하기 위해 필요에 따라 equals()와
                  hashCode() 메서드를 재정의함
            - 유일한 값을 관리하는데 필요한 메서드
                - 아이디, 주민번호, 사번 관리하는데 유용
            - 구현한 클래스
                - HashSet, TreeSet 등이 있음
                    - TreeSet 클래스
                        - 객체의 정렬에 사용되는 클래스
                        - 중복을 허용하지 않으며 오름차순이나 내림차순으로 객체를 정렬함
                        - 내부적으로 이진 검색 트리(binary search tree)로 구현되어 있음
                        - 이진 검색 트리에 자료가 저장될 때 비교하여 저장될 위치를 정함
                        - 객체 비교를 위해 Comparable이나 Comparator 인터페이스를 구현해야 함
                            - 비교 대상이 되는 객체에 Comparable이나 Comparator 인터페이스를
                              구현해야 TreeSet에 추가할 수 있음
                            - String, Integer 등 JDK의 많은 클래스들이 이미 Comparable을 구현했음

3. Map 인터페이스
    1) 쌍으로 이루어진 객체를 관리하는데 필요한 여러 메서드가 선언되어 있음
    2) Map을 사용하는 객체는 key-value 쌍으로 되어 있고
       key는 중복될 수 없음
    3) 검색을 위한 자료구조
        - key를 이용하여 값을 저장하거나 검색, 삭제할 때 사용하면 편리
        - 내부적으로 hash 방식으로 구현
    4) key가 되는 객체는 객체의 (논리적)유일함의 여부를 알기 위해
       equals()와 hashCode() 메서드를 재정의 함
    5) 구현한 클래스
        - HashSet, HashMap, TreeMap
            - HashMap 클래스
                - Map 인터페이스를 구현한 클래스 중 가장 일반적으로 사용하는 클래스
                - pair 자료를 쉽고 빠르게 관리할 수 있음
        - Properties

4. Iterator (Collection 요소를 순회)
    1) 컬렉션 프레임워크에 저장된 요소들을 하나씩 차례로 참조하는 것
    2) 순서가 있는 list 인터페이스의 경우는 Iterator를 사용하지 않고
       get(i) 메서드를 활용할 수 있음
    3) Set 인터페이스의 경우 get(i) 메서드가 되공되지 않으므로
    Iterator를 활용하여 객체를 순회함
    
    4) Iterator 사용하기
        - boolean hasNext()
            - 이후에 요소가 더 있는지를 체크하는 메서드
            - 요소가 있다면 true 없으면 false
        - E next()
            - 다음에 있는 요소를 반환