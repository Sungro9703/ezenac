1. 다형성(polymorphism) 이란?
    1) 하나의 코드가 여러 자료형으로 구현되어 실행되는 것
    2) 같은 코드에서 여러 다른 실행 결과가 나옴
    3) 캡슐화(정보 은닉), 상속과 더불어 객체지향 프로그래밍의 가장 큰 특징 중 하나
    4) 다형성을 잘 활용하면 유연하고 확장성있고, 유지보수가 편리한 프로그램을 만들 수 있음

    5) 하나의 참조변수로 여러 타입의 객체를 참조할 수 있는 것
       - 하나의 코드로 여러 자료형으로 구현되어 실행되는 것
       
    6) 상속한 클래스의 객체는 슈퍼 클래스, 서브 클래스로도 다룰 수 있음
       - 조상의 참조변수로 자손타입의 객체를 다룰 수 있는 것

    7) 하위 클래스 객체를 상위 클래스에 대입하여 사용할 수 있음

2. 다형성을 사용하는 이유
    1) 상속과 메서드 재정의를 활용하여 확장성 있는 프로그램을 만들 수 있음
       그렇지 않은 경우 많은 if - else if문이 구현되고, 코드의 유지보수가 어려움
    2) 상위 클래스에서는 공통적인 부분을 제공하고, 
       하위 클래스에서는 각 클래스에 맞는 기능 구현
    3) 여러 클래스를 하나의 타입(상위 클래스)으로 핸들링할 수 있음

3. 다형성으로 인한 형변환(캐스팅)
    1) 형변환의 전제 조건 - 상속, 구현관계에 있는 것만 객체타입 변환 가능
    2) Up-casting: 자손타입에서 조상타입으로 형변환, 형변환 생략 가능
        → 조작 멤버변수가 줄어듦
    3) Down-casting: 업캐스팅된 클래스를 다시 원래의 타입으로 형변환
        - 하위 클래스로의 형변환은 명시적으로 해야함
    4) instanceof 연산자
        - 인스턴스의 타입 체크
        - 참조변수가 참조하는 인스턴스의 실제 타입을 체크하는 용도
        - 원래 인스턴스의 타입이 맞으면 true, 아니면 false

4. 매개변수의 다형성
    1) 참조타입 매개변수는 메서드 호출 시 
       자신과 같은 타입이거나, 자손타입의 주소를 넘겨줌