1. 리누스 토발즈
    1) 리눅스의 창시자
        -1991년 취미로 개발
    2) Git의 창시자

2. Git
    0) 리눅스 프로젝트에서 사용하던 Bitkeeper가 상용화 (2주만에)
    1) 2005년 Git 탄생
    2) 커뮤니케이션
    3) VCS (Version Control System), DVCS (Distributed Version Control System)
        - 데이터의 과거와 현재 상태 관리하는 것
        - 복수 사람들이 사용하는 것
    4) 동시 다발적인 브랜치 작업
    5) 대중성, 검증된 안정성
    6) 왜? - 협업
    7) 협업 시 서로간의 상태를 똑같게 유지하는 기능

3.GitHub
    1) Git 기반
    2) 프로젝트 호스팅 사이트
    3) 2008년 2월 서비스 시작

4. Git 장점
    1) 이력 기록 및 추적
    2) 원격 저장소 및 공유
    3) 변경 이력 병합
    

5. 기본 명령어
    1) 저장소(Repository) 생성
        - git init: 실행한 위치 Git 저장소로 초기화
    
    2) vim
        - 리눅스, UNIX에서 사용할 수 있는 텍스트 편집기
        - i 키: 일반 모드 => 입력 모드 전환
                Esc 키: 입력 모드 => 일반 모드 전환
        - : 키 : 명령 모드 전환 (명령어 입력 가능)
                 wq (저장, 종료)
        
    3) 저장소 상태 확인
        - git status

    4) 저장소에 파일 추가
        - git add 파일 이름: 해당 파일 Git이 추적할 수 있게 추가함.
                             파일 기록 추적하도록 추가.
        
    5) 저장소에 수정 내역 제출
        - git commit: 변경된 파일을 저장소에 제출
            commit: '의미'를 가질 수 있게 되는 최소한의 단위
    
    6) 커밋 로그를 조회하는 명령어
        - git commit
            - git log
            - git log -p
                - patch
                - 파일 단위에서 변경 내용을 보여줌.
            - git log[숫자]
                - 최근 몇 개의 커밋을 보여줄지 지정함
            - git log --static
                - 각 커밋의 통계 정부 볼 수 있음
                    - 어떤 파일이 수정되었고, 각 파일에서 몇 줄이 추가, 삭제되었는지 의미
            - git log --pretty=oneline
                - 각 커밋을 한 줄로 보여줌
            - git log --pretty=oneline --graph
                - 여러 branch를 생성하고 병합하는 작업을 가시적으로 그래프로 표시

    7) branch 병합
        - git merge 'branch이름'
            - 현재 작업중인 branch에 'branch이름'의 브랜치를 끌어와 병합함.
            

6. Git 작업 트리
    1) 작업 디렉토리 (Work Directory)
        - 실제 작업중인 파일들이 존재하는 영역
        - 파일 생성, 기존 파일을 수정
    2) 스테이징 영역 (Staging Area)
        - 작업 디렉토리에서 작업중인 파일 중 깃이 추적하는 파일들을 식별하는 영역
        - 실제로는 .git 숨김 폴더 내부의 index 파일에서 추적하는 파일들을 식별하고 있음.
    3) 지역 저장소 (Local Repository)
        - 스테이징 영역에서 추적되는 파일이 커밋으로 등록되는 영역임.
        - 스테이징 영역의 파일 혹은 파일들이 하나의 변경 단위인 커밋으로 등록되는 과정임.

7. git add 명령으로 스테이징 영역에 파일 추가됨
    1) Stage: 커밋으로 기록할 수 있는 최종 상태
        - Tracked 상태와 Unmodified 상태
    2) UnStage: 스테이징 영역에 있지만, 파일에 변화가 있는 상태
        - 커밋으로 기록할 수 있는 상태가 아님

8. 새로운 branch 생성 및 이동
    0) 브랜치(branch)
        - 프로젝트 기준 코드인 main 브랜치로부터 독립적인 작업 공간을 만들어주는 기능
        - 여러 개발자가 서로 다른 버전의 코드를 만들 때 서로의 작업에 영향을 주고 받지
          않기 위해 필요함
    1) 저장소에 branch 추가
        - git branch이름
    2) 작업중인 branch 변경
        - git checkout branch이름
    3) 충돌 발생
        - 각 브랜치가 하나의 파일을 동시에 수정하는 경우
        - Conflict
            - 병합하면서 생기는 충돌을 해결해야함
        - 병합 실패한 코드에서 내용 확인
            - 충돌 시작 부분 표시
                - <<<<<<<<<<HEAD
            - 충돌 끝 부분 표시
                - >>>>>>>>>>ezen
            - 경계 표시
                - ============
    4) 병합 실패한 경우의 내용 확인
        - 수동으로 충돌 해결해야함
            - 충돌된 두 branch 중 하나 내용 선택
            - 두 수정 내역 합침
        -충돌된 부분이  어떤 의미인지 이해하고 있어야 해결 가능.