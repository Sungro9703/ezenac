1. 프로그램에서의 오류
    1) 컴파일 오류 (compile error)
        - 프로그램 코드 작성 중 발생하는 문법적 오류 -> detection 됨
    2) 실행 오류 (runtime error)
        - 실행 중인 프로그램이 의도하지 않는 동작(bug)을 하거나
          프로그램이 중지되는 오류
        - 실행 오류는 비정상 종료가 되는 경우 시스템의 심각한 장애를 발생할 수 있음

        -> 자바 예외 처리를 통하여 프로그램의 비정상 종료를 막고 log를 남길 수 있음
            - 시스템이 원활히 실행되도록 함

2. 예외 (Exception)
    1) 프로그램에서 제어할 수 있는 오류
        -읽으려는 파일이 없는 경우,
          네트워크나 소켓 연결 오류 등 자바 프로그램에서는 에외에 대한 처리를 수행함
        - 자바는 안정성이 중요한 언어로 대부분의 프로그램에서 발생하는 오류에 대해
          문법적으로 예외처리를 해야함
    2) 예외 클래스들
        - 최상 클래스 Exception
            - IOException (입출력 예외 처리)
            - RuntimeException (실행 오류 예외 처리)
                - ArithmeticException: 정수를 0으로 나눈 경우 발생
                - NullPointerException: 초기화 되지 않은 Object를 사용하는 경우
                - ArrayIndexOutOfBounds: 참조하는 파일이 지정된 위치에 존재하지 않는 경우
        
3. 예외 처리하기와 미루기
   
    1) try~catch 문
        try {
            예외가 발생할 수 있는 코드 부분
        } catch(처리할 예외 타입 e) {
            try 블록 안에서 예외가 발생했을 때
            예외를 처리하는 부분
        
        
         
    2) finally 블럭에서 파일을 닫거나 네트워크를 닫는 등의 리소스 해제 구현
       try {
            예외가 발생할 수 있는 코드 부분
        } catch(처리할 예외 타입 e) {
            try 블록 안에서 예외가 발생했을 때
            예외를 처리하는 부분
        } finally {
            예외 발생 여부와 상관 없이 항상 수행되는 부분
            리소스를 정리하는 코드 주로 씀
        }

    3) try with-resources 문
         - 리소스를 사용하는 경우 close() 하지 않아도 자동으로 해제되도록 함
         - 리소스를 try() 내부에서 선언해야 함
            - java9부터 리소스 try() 외부에서 선언하고 변수만 try(obj)와같이 사용할 수 있음
        - close()를 명시적으로 호출하지 않아도
          try{} 블럭에서 열린 리소스는 정상적인 경우나 예외가 발생한 경우 모두 자동으로 해제됨
            - 해당 리소스 클래스가 AutoCloseable 인터페이스를 구현해야 함
                - FileInputStream의 경우 AutoCloseable을 구현하고 있음

        - AutoCloseable 인터페이스 구현
    
    4) 예외 처리 미루기 (던지기)
        - throws를 사용하여 예외처리 미루기
        - 예외가 발생한 메서드에서 처리하지 않고
          메서드를 호출한 곳으로 예외를 던져
          메서드를 호출한 부분에서 예외를 처리하는 방법


        - JVM        - main()        myMethod()      myMethod2()
                                                       예외발생
            - main()에서 throws를 사용하면 가상머신에서 처리됨

        - try{} 블럭으로 예외를 처리하지 않고, 메서드 선언부에 throws를 추가
    
    5) 하나의 try{} 블럭에서 예외가 여러개 발생하는 경우
        - 예외를 묶어서 하나의 방법으로 처리할 수 있음
        - 각각의 예외를 따로 처리할 수도 있음
        - Exception 클래스를 활용하여 default 처리를 할 떄
          Exception 블럭은 맨 마지막에 위치해야 함
            가장 최상위 클래스인 Exception 클래스는 가장 마지막 블럭에 위치해야 함

4. 사용자 정의 예외 클래스 활용
    1) 자바에서 제공하는 예외 클래스 외에 프로그래머가 직접 만들어야 하는 예외가 있을 수 있음
    2) 기존 예외 클래스 중 가장 유사한 예외 클래스에서 상속 받아 만듦
    3) 기본적으로 Exception 클래스를 상속해서 만들 수 있음

        - 매개변수로 전달된 아이디가 null이거나 8자 이gk 20자 아ㅣ상인 경우
          예외를 발생시키는 예외 클래스를 만들고 예외를 발생시켜라