1. 프로그래밍 방법론
    1) 절차식 프로그래밍
        - 순차적인 명령을 수행하고 간단한 분기만 가능
    2) 구조적 프로그래밍
        - 특정 변수를 묶어 구조화하고 이를 통해 프로그램이 효율을 높임
    3)  객체지향 프로그래밍
        - 객체를 기반으로 프로그래밍 되며 클래스, 속성, 기능 등의 현실세계 모델을 반영
    4) 함수형 프로그래밍
        - 객체의 형태를 벗어나 함수형을 확장해 함수를 변수처럼 사용 가능

2. 함수형 프로그래밍과 람다식(Lambda expression)
    1) 자바는 OOP
        - 기능을 수행하기 위해서는 객체를 만들고
          그 객체 내부에 멤버 변수를 선언하고
          기능을 수행하는 메서드를 구현
    2) 자바 8 버전부터 함수형 프로그래밍 방식을 지원 => 람다식
        - 자바에서 람다식을 수용한 이유
            - 코드가 매우 간결해짐
            - 대용량 데이터를 필터링 또는 매핑해서 쉽게 집계할 수 있음
        - 객체지향 프로그래밍보다 효율적인 경우
            - 데이터를 바로 처리하는 것이 속도에 유리
            - 멀티코어 CPU에서 데이터를 병렬처리하고 취합할 때, 객체보다는 함수가 유리
            - 이벤트 지향 프로그래밍에 적합
    3) 함수의 구현과 호출만으로 프로그래밍이 수행되는 방식 
    4) 현대적 프로그래밍 = 객체지향 프로그래밍 + 함수적 프로그래밍
    5) 람다 계산법에서 사용된 식을 프로그래밍 언어에 접목
    6) 익명함수(Anonymous function)를 생성하기 위한 식
    7) 람다식 => 매개변수를 가진 코드 블럭 => 익명 내부 객체
    8) 함수를 기반으로 하는 프로그래밍이고
       입력받은 자료 외에 외부 자료를 사용하지 않음
       여러 자료가 동시에 수행되는 병렬처리가 가능
    9) 함수형 프로그래밍은 함수의 기능이 자료에 독립적임을 보장함.
       동일한 자료에 대해 동일한 결과를 보장

3. 람다식 문법
    1) 익명 함수 만들기
    2) (매개변수) -> {실행문;}   : 매개변수와 매개변수를 이용한 실행문

        ex) 두 수를 입력 받아 더하는 add() 함수
            int add(int x, int y) {
                return x + y;
            }   

        - 람다식
            (int x, int y) -> {return x + y}

        - 매개변수가 두개 이상인 경우 괄호를 생략할 수 없음
            x, y -> {System.out.println(x + y);}

        - 매개변수가 하나인 경우 자료형, 괄호 생략 가능
            x -> {System.out.println(x);}

        - 실행문이 한 문장인 경우 중괄호 생략 가능
            x -> System.out.println(x);

        - 실행문이 한 문장이라도 return문을 사용하면 중괄호를 생략할 수 없음
            x -> return x.length();     // 오류

        - 실행문이 한 문장의 반환문인 경우엔 return과 중괄호를 모두 생략
            (x, y) -> x + y;
             x -> x.length;
4. 함수형 인터페이스 선언과 구현하여 사용하기
    1) 함수형 인터페이스 선언하기
        - 람다식을 선언하기 위한 인터페이스
        - @FunctionalInterface
        - 익명함수와 매개변수만으로 구현되므로 인터페이스는 단 하나의 메서드만을 선언해야 함
    2) 람다식 구현과 호출

5. 함수를 변수처럼 사용하는 람다식
    1) 변수
        - 자료형에 기반하여 선언    int a;
        - 매개변수에 전달           int add(int x, int y);
        - 메서드의 반환 값          return num;
    2) 람다식은 프로그램 내에서 변수처럼 사용할 수 있음