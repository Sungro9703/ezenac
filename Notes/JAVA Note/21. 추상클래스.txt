0) abstract (추상적인, 미완성의)
    1) 클래스 앞에 붙을 때
        - 클래스 내에 추상 메서드가 존재하는 클래스
    2) 메서드 앞에 붙을 때
        - 선언부만 존재하고, 구현부가 없는 추상 메서드
    
1. 추상 클래스 (abstract class)
    1) 구현 코드 없이 메서드의 선언만 있는 추상 메서드(abstract method)를 포함한 클래스
        - 메서드의 선언(declaration): 반환타입, 메서드 이름, 매개변수로 구성
        - 메서드 정의(definition): 메서드 구현(implementation), 구현부(body)를 가짐
                                  {}
            - 예) public abstract int add(int x, int y);    // 선언
                  public int add(int x, int y) {}    // 구현부가 있음 추상 메서드 아님
    2) abstract 예약어를 사용
    3) 추상 클래스는 new 할 수 없음 (인스턴스화 할 수 없음)
        - 추상 메서드가 없는 클래스라도 abstract로 클래스를 선언하면 추상 클래스로 인스턴스화 할 수 없음

2. 추상 클래스 구현하기
    1) 추상 클래스의 추상 메서드는 하위 클래스가 상속하여 구현
        - 추상 클래스 내의 추상 메서드: 하위 클래스가 상속하여 구현
    2) 공통적으로 사용될 것이라고 예상되는 것을 모아서 하나의 추상 클래스로 만듦
        - 한 곳에서 관리, 오류 줄어듦, 코드 중복 방지

3. final 예약어
    1) final 변수: 값이 변경될 수 없는 상수
        - public static final double PI = 3.14;
    2) final 메서드: 하위 클래스에서 재정의 할 수 없는 메서드
    3) final 클래스: 상속할 수 없는 클래스

4. 응용 - 템플릿 메서드 패턴
    1) 템플릿 메서드
        - 추상 메서드나 구현된 메서드를 활용해 시나리오(코드의 흐름)를 정의하는 메서드
        - final로 선언하여 하위 클래스에서 재정의(Overriding) 할 수 없음
        - 프레임워크에서 많이 사용되는 설계 패턴.