1. 객체지향 분석
    1) 객체지향 분석은 무엇을 만들 것인가를 추상화하는 과정
        - 요구사항으로부터 문제를 만들어가는 과정
    
    2) 분석 VS 설계
        - 분석은 발견하는 것이고 설계는 발명하는 것
        - 분석은 문제를 만들어가는 것이고 설계는 해답을 만들어가는 것
        - 분석은 (문제가) "무엇인가?"에 관심
          설계는 (문제를) "어떻게" 해결할 것인가에 관심
        
2. 모델링
    1) 주어진 생각이나 서술에서 추상적인 모델을 정의하고
       최종적으로 코드를 만들어 내기 위한 장치
       => 일종의 청사진이 필요함 (UML : Unified Modeling Language)
    2) 모델링 하는 이유
        - 시스템을 눈에 보이게 하기 위함
        - 프로젝트 참여자들(개발자)의 통신 수단을 제공하기 위함
        - 모델 자체가 훌륭한 문서가 될 수 있음
        - 시스템의 구조와 행동을 명확하게 결정하기 위함
        - 소프트웨어를 개발하기 위한 뼈대를 제공하기 위함

3. UML (Unified Modeling Language)
    1) 그래픽 표기법의 집합
    2) 소프트웨어 시스템을 표현하고 설계할 수 있도록 도움
    3) 객체지향 방식 형태를 지원
    4) 종류
        - Diagram
            - Structured  Diagram
                - Class Diagram
                    - 소프트웨어 기본 구성 단위 클래스와 그들간의 관계 정의
                    - 정적인 관점에서 클래스 구조 표현
                    - 기본적 데이터 모델링 수행 (분석단계)
                    - 객체지향 언어코딩을 위한 설계 사양 제공
                    - 분석에서 설계까지 일관된 소프트웨어 시스템 분석, 설계 도구
            - Behavior Diagram 
                - Use Case Diagram
                - Sequence Diagram

4. UML을 위한 다이어그램 요소
    1) Class
        - public(+), protected(#), private(-)
        - 정적(static) 속성과 메서드
            - 밑줄로 표시
    
    2) Relationship (관계)
        - 객체간의 연결들을 클래스간 관계로 추상화한 것
        - 클래스간의 구조 혹은 참조 관계 표현
        - 구분
            - 연관관계 (Association)
                - 참조하는 클래스는 해당 타입의 필드를 가지게 됨(사용한다)
                - 얼마나 ㅏㅁㄶ은 수가 참조되는지 나타낼 수 있음 (Multiplicity)
            - 집합, 집약관계 (Aggregation)
                - 전체와 부분의 관계를 명시적으로 나타내고 싶을 때 사용
                - "갖는다. 하지만 생성의 의무가 없다
            - 구성, 합성관계 (composition)
                - 전체와 부분의 관계를 명시적으로 나타내고 싶을 때 사용
                    - String aggregation
                - "갖는다. 그리고 생성, 파괴 의무가 있다"

    3) Use Case Diagram
        - 사용자가 하는 행동을 나타냄
        - 시스템과 사용자간의 상호작용
        - 사용자 관점에서 논리적인 시스템의 기능 정의
        - 개발자와 사용자, 이해관계자들 간의 이해 도모
        - 시스템 전체 개발범위 결정
        - 시스템 분석, 설계 기준
        - 인수 테스트 기준 
    
    4) Sequence Diagram
        - 객체들간의 협력 과정을 동적으로 정의
        - 객체간 동적 상호작용을 시간적 개념으로 파악하기 위함
        - Use Case 단위로 작성
        - 분석에서 설계까지 일관된 형식의 소프트웨어 시스템 분석 설계 도구
        - 클래스 다이어그램과 병행되면 상호간 일관성 요구됨