1. 소개
    1) 기존에 XML에서 빈 설정을 애너테이션을 이용해서 자바 코드에서 설정하는 방법
    2) 기능이 복잡해짐에 따라 XML에서 설정하는 것보다 유지보수에 유리함 
    3) 현재 애플리케이션 개발시 XML 설정 방법과 애너테이션 방법을 혼합해서 사용함 

2. Bean 등록 메타정보 구성 전략
    1) XML 단독 사용 
        - 모든 Bean을 명시적으로 XML에 등록하는 방법 
    2) XML과 빈 스캐닝 (Bean Scanning) 의 혼용
        - Bean으로 사용될 클래스에 특별한 애노테이션을 부여해주면
          이런 클래스를 자동으로 찾아서 Bean으로 등록함.
            - 빈 스캐닝을 퉁한 자동인식 Bean 등록기능이라고 함.   
        - 애노테이션을 부여하고 자동 스캔으로 빈을 등록하면 개발속도 향상시킴.                  

3. annotation-based programming
    1) @Controller, @RequestMapping 등 다양한 애노테이션 제공함
    2) 애노테이션을 통한 요청 연결, 데이터 가공, 예외 처리 등 구성함 

4. 애노테이션 
    1) 코드의 메타-데이터(Metadata)로 작성, 컴파일 또는 런타임에 활용됨
    2) JDK가 제공하는 빌트인(Built-in)과 직접 작성하는 커스텀(Custom)으로 분류됨.
    3) 패키지, 클래스, 메소드, 필드에 선언할수 있음.
    4) @{AnnotationName}으로 표기함.

5. 스프링 애너테이션 제공 클래스 
    1) 브라우저 URL 요청처리 애너테이션 관련 클래스 
        - DefaultAnnotationHandlerMapping
            - 클래스 레벨에서 @RequestMapping을 처리함.    
        - AnnotationMethodHandlerAdapter
            - 메서드 레벨에서 @RequestMapping을 처리함.             

5. <context:component-scan> 태그 
    1) 패키지 이름을 지정하면
       애플리케이션 실행 시 해당 패키지에서 애너테이션으로 지정된 클래스를 
       빈으로 만들어줌   
    2) 사용 형식
        - <context:component-scan base-package="패키지 이름" />    

6. 여러가지 스테레오 타입 애너테이션 (Bean 등록 Annotation)
    1) @Controller
        - 프리젠테이션 레이어, 웹 애플리케이션에서 웹 요청과 응답을 처리하는 클래스 
        - 스프링 컨테이너가 component-scan에 의해 지정한 클래스를 컨트롤러 빈으로 
          자동 변환함.
        - Controller 클래스 정의           
    2) @Service 
        - 서비스 레이어, 비즈니스 로직을 가진 클래스 
        - 스프링 컨테이너가 component-scan에 의해 지정한 클래스를 서비스 빈으로 
          자동 변환함.
    3) @Repositoty
        - 퍼시스턴스(persistence) 레이어, 영속성을 가지는 속성(파일, DB)을 가진 클래스
        - 스프링 컨테이너가 component-scan에 의해 지정한 클래스를 DAO 빈으로 
          자동 변환함.        
    4) @Component  
        - 컴포넌트를 나타내는 일반적인 스테레오 타입으로 <bean> 태그와 동일한 역할을 함
        - 스프링 컨테이너가 component-scan에 의해 지정한 클래스를 빈으로 자동 변환함.  
    
    5) @Controller, @Service, @Repositoty는 @Component의 구체화된, 더 특정한
       유즈케이스된 형태임.                             

7. 관련 애노테이션 
    1) @RequestMapping
        - HTTP 요청 URL을 처리할 Controller 정의
        - URL 주소를 맵핑
    2) @RequestParam
        - 매개변수 갯수가 많아지면 일일이 getParameter()를 이용하는 방법은 불편함
        - 메서드에 적용해 쉽게 값을 얻을 수 있음 
        - HTTP 요청에 포함된 파라미터 참조 시 사용   
        
        - 적용시 required 속성을 생략하면 기본값은 true임
            - 메서드 호출 시 반드시 지정한 이름의 매개변수를 전달해야 함
                - 매개변수가 없으면 예외가 발생
        - required 속성을 false로 설정하면
            - 메서드 호출 시 지정한 이름의 매개변수가 전달되면 값을 저장하고
              없으면 null을 할당함.   

        - Map에 매개변수 값 설정하기 
            - 전송되는 매개변수 수가 많을 경우 Map에 바로 저장해서 사용     
    3) @ModelAttribute
        - HTTP 요청에 포함된 파라미터를 모델 객체로 바인딩  

    4) @Autowired 
        - 스프링 DI(의존관계 주입)에서 사용되는 특별한 어노테이션임
        - 의존하는 객체를 자동으로 주입해 주는 어노테이션 
        - 기존 XML 파일에서 각각의 빈을 DI로 주입했던 기능을 코드에서 애너테이션으로 
          자동으로 수행함 
        - 별도의 setter나 생성자 없이 속성에 빈을 주입할수 있음   

    5) @PathVariable
        - 파라미터를 URL 형식으로 받을 수 있도록 해줌 
        - 브라우저에서 요청 URL로 전달된 매개변수를 가져올 수 있음         

    6) @RequestBody
        - HTTP Request Body를 Java객체로 전달 받을수 있음.
        - 브라우저에서 전달되는 JSON 데이터를 객체로 자동 변환해줌 
       @ResponseBody 
        - Java객체를 HTTP Response Body로 전송할수 있음.
        - jsp가 아닌 텍스트나 JSON으로 결과를 전송할수 있음.

    7) ResponseEntity
        - 답변시 데이터를 전달시 예외에 대해 세밀한 제어가 필요한 경우에 사용함


8. Model 클래스 이용해 값 전달
    1) 따로 뷰 정보를 전달할 필요가 없을 때 사용하면 편리함 







