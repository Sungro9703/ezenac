1. IoC (Inversion of Control)
    1) 객체의 생성, 생명주기의 관리까지
       모든 객체에 대한 제어권이 바뀌었음
    2) 객체의 생성을 책임지고, 의존성 관리
    3) POJO의 생성, 초기화, 서비스, 소멸에 대한 권한을 가짐
    4) 개발자들이 직접 POJO를 생성할 수 있지만 컨테이너에게 맡김

2. IoC의 분류
    1) DL (Dependency Lookup) : 의존성 검색
    2) DI (Dependency Injection) : 의존성 주입
        - 각 클래스간의 의존관계를 빈 설정(Bean Definition) 정보를 바탕으로
          컨테이너가 자동으로 연결해주는 것
        - Setter Injection
        - Constructor Injection
        - Method Injection

3. DI
    1) 개발자들은 단지 빈 설정파일에서 의존관계가 필요하다는 정보를 추가하면 됨
    2) 객체 래퍼런스를 컨테이너로부터 주입받아, 실행 시에 동적으로 의존관계 생성
    3) 컨테이너가 흐름의 주체가 되어 애플리케이션 코드에 의존관계를 주입해 주는 것
    4) 장점
        - 코드가 단순해짐
        - 컴포넌트 간 결합도가 제거됨

4. DI 유형
    1) Setter Injection (Setter 메서드를 이용한 의존성삽입)
    2) Constructor Injection (생성자를 이용한 의존성삽입)
    3) Method Injection (일반 메서드를 이용한 의존성삽입)

5. Spring DI 컨테이너
    1) Spring DI 컨테이너가 관리하는 객체를 빈(Bean)이라고 하고,
       이 빈들을 관리한다는 의미로 컨테이너를
       빈 팩토리(BeanFactory)라고 부름
        - 객체의 생성과 객체 사이의 런타임 관계를 DI 관점에서 볼 때는 
          컨테이너를 BeanFactory라고 함
        - BeanFactory에 여러가지 컨테이너 기능을 추가하여
          애플리케이션 컨텍스트 (ApplicationContext)라고 부름

    2) BeanFactory
        - Bean을 등록, 생성, 조회, 반환 관리
        - getBean() 메서드가 정의되어 있음
    3) ApplicationContext
        - Bean을 등록, 생성, 조회, 반환 관리
        - Spring의 각종 부가 서비스를 추가 제공
        - Spring이 제공하는 ApplicationContext 구현 클래스가 여러종류 있음

6. Spring DI 용어
    1) 빈(Bean)
        - 스프링이 IoC 방식으로 관리하는 객체
        - 스프링이 직접 생성과 제어를 담당하는 객체
    2) 빈 팩토리 (BeanFactory)
        - 스프링의 IoC를 담당하는 핵심 컨테이너
        - - Bean을 등록, 생성, 조회, 반환하는 기능 담당
    3) 애플리케이션 컨텍스트 (ApplicationContext)
        - BeanFactory를 확장한 IoC 컨테이너
    4) 설정 메타정보(Configuration metadata)
        - ApplicationContext 또는 BeanFactory가 IoC를 적용하기 위해
          사용하는 메타정보

7. Bean 의존관계 설정 방법
    1)Setter Injection : <property> 태그
        - Setter 메서드를 통해 의존관계가 있는 Bean을 주입하려면
            <property> 태그를 사용
            - value 속성은 단순 값 또는 Bean이 아닌 객체 주입
            - ref 속성은 사용하면 Bean 이름을 이용해 주입할 Bean을 찾음

    2) Constructor Injection : <constructor-arg> 태그
        - Constructor를 통해 의존관계가 있는 빈을 주입하려면
          <constructor-arg> 태그 사용
        - 생성자의 파라미터를 이용하기 때문에 한번에 여러 객체를 주입할 수 있음

8. 프로퍼티(property) 값 설정 방법
    1) 단순 값(문자열, 숫자)의 주입(Injection)
    2) 컬렉션(Collection) 타입의 값 주입
        - List, Set, Map, properties와 같은 타입을 XML로 작성해서
          프로퍼티에 주입하는 방법
            - List, Set 타입 : <list>, <set>, <value> 태그 이용

9. Bean 등록 메타정보 구성 전략
    1) 전략(1) : XML 단독 사용
        - 모든 Bean을 명시적으로 XML에 등록하는 방법
        - Bean 개수가 많아지면 관리하기 번거로울 수 있음
        - 설정파일을 공유해서 개발하다 보면 동시에 수정, 충돌 발생
        - 적절한 setter 메서드, constructor가 코드 내에 반드시 존재해야 함
    2) 전략(2) : XML과 빈 스캐닝(Bean Scanning)의 혼용
        - Bean으로 사용될 클래스에 특별한 어노테이션(Annotation)을 부여해주면
          이런 클래스를 자동으로 찾아서 Bean으로 등록함
        - 특정 어노테이션이 붙은 클래스를 자동으로 찾아서 Bean으로 등록해주는 방식을
          빈 스캐닝을 통한 자동인식 Bean 등록기능이라고 함