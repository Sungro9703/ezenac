1. Intro
    1) 기존의 JDBC의 이슈
        - connection => statement 객체 생성 => SQL문 전송 => ResultSet 객체 반환 => close
        - SQL문이 프로그래밍 코드에 섞여 코들를 복잡해서 사용 및 유지보수가 어려움
    2) 마이바티스 프레임워크를 도입해 SQL문 가독성을 높여 사용 편리성 만듦
       코드와 SQL문 분리해서 사용 및 유지보수 편리하게 함

2. 개요
    1) SQL을 별도 파일(XML)로 분리 관리
        - 객체-SQL 사이의 파라미터 Mapping 작업을 자동으로 해줌
    2) JDBC 코드 작성의 불편함 제거,
       객체나 DTO 객체 중심으로 개발 가능

3. MyBatis 특징
    1) 퍼시턴스(Persitence) 프레임워크
    2) JDBC의 모든 기능을 대부분 제공
    3) SQL에 변경이 있을 때마다 자바 코드를 수정하거나 컴파일하지 않아도 됨'
    4) 데이터소스(DataSource) 기능과 트랜잭션 처리 기능을 제공

4. MyBatis3 주요 컴포넌트
    1) Config.xml (MyBatis 설정파일)
        - 데이터베이스 접속 주소 정보나 Mapping 파일 경로 등 고정된 환경정보 설정
    2) mapping 파일 (mapper.xml)
        - SQL문과 Mapping 설정
    3) SqlSessionFactoryBuilder
        - SqlSessionFactory를 생성
    4) SqlSessionFactory
        - SqlSession을 생성
    5) SqlSession
        - 핵심적인 역할을 하는 클래스로써 SQL 실행이나 트랜잭션 관리
        - Thread-Safe 하지 않으므로 thread마다 필요에 따라 생성

5. MyBatis-Spring 주요 컴포넌트
    1) SqlSessionFactoryBean
        - 설정파일(Config.xml)을 바탕으로 SqlSessionFactory를 생성
    2) SqlSessionTemplate
        - 핵심적인 역할을 하는 클래스로써 SQL 실행이나 트랜잭션 관리
        - Thread-Safe 함
        - SqlSession 인터페이스를 구현

6. SqlSession 클래스에서 제공하는 메서드
    1) selectList(id)
        - id에 대한 select문 실행한 후 여러 레코드를 List로 반환
    2) T selectOne(id)
        - id에 대한 select문 실행한 후 한개의 레코드 반환
    3) int insert(id, Object obj)
        - id에 대한 insert문 실행하면서 obj 객체의 값을 테이블에 추가
    4) int update(id, Object obj)
        - obj 객체의 값을 조건문의 수정 값으로 사용해 id에 대한 update문 실행
    5) int delete(id, Object obj)
        - obj 객체의 값을 조건문의 조건 값으로 사용해 id에 대한 delete문 실행

7. MyBatis로 조건 값 전달 방법
    1) SQL문에서 조건값 사용방법
        - #{전달된 매개변수 이름}

8. 마이바티스의 동적 SQL문
    1) 주로 SQL문의 조건절에서 사용
        - 조건절(where)에 조건을 동적으로 추가
    2) JSTL과 XML 기반으로 동적 SQL문 작성
        - if
        - choose(when, otherwise)
        - trim()
        - foreach

    3) <if> 태그
        - <where>
            <if test='조건식'>
                추가할 구문
            </if>
          <where>

    4) <choose> 태그
        - <choose>
            <when test="조건식1">
                구문1
            </when>
            <when test="조건식2">
                구문2
            </when>
            .....
            <otherwise>
                구문 n+1
            </otherwise>
        </choose>