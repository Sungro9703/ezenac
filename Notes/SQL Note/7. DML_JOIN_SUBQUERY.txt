1. SELECT 문: 데이터 검색
    1) 정렬 검색
        - 사용자가 원하는 순서로 출력
        - 오름차순(기본): ASC / 내림차순: DESC
        - 널 값은 오름차순에서는 맨 마지막에 출력, 내림차순에서는 맨 먼저 출력
        - SELECT [ALL | DISTINCT] 속성들
          from 테이블
          [WHERE 조건]
          [ORDER BY 기준속성 [ASC | DESC]];
    
    2) 집계 함수(aggregate function)를 이용한 검색
        - 여러 행들의 그룹이 모여서 그룹당 단 하나의 결과를 돌려주는 함수
            - GROUP BY 절은 행들을 소그룹화 함
        - = 열 함수(column function)
        - 개수, 합계, 평균, 최대값, 최소값의 계산 기능 제공
          SELECT 절이나 having절에서만 사용가능
        - COUNT(*)      NULL값을 포함한 레코드(행)의 개수를 리턴
          COUNT(표현식) 표현식의 값이 NULL이 아닌 행의 수를 출력
          MAX(표현식)   표현식이 NULL값인 것을 제외한 컬럼값의 최대값을 리턴
          MIN(표현식)   표현식이 NULL값인 것을 제외한 컬럼값의 최소값을 리턴
          SUM(표현식)   표현식이 NULL값인 것을 제외한 컬럼값의 합을 리턴
          AVG(표현식)   표현식이 NULL값인 것을 제외한 컬럼값의 평균을 리턴
    
    3) 그룹별 검색
        - 특정 속성의 값이 같은 튜플을 모아 그룹을 만들고, 그룹별로 검색
        - HAVING 키워드를 함께 이용해 그룹에 대한 조건을 작성
        - 그룹을 나누는 기준이 되는 속성을 SELECT절에도 작성하는 것이 좋음
        - SELECT [ALL | DISTINCT] 속성들
          from 테이블
          [WHERE 조건]
          [GROUP BY 속성 [HAVING조건]]
          [ORDER BY 속성 [ASC | DESC]];

        - GROUP BY 절
            - HAVING 절은 GROUP BY 절의 기준 항목이나 소그룹의 집계 함수를 이용한
              조건을 표시
            - GROUP BY 절에 의한 소 그룹별로 만들어진 집계 데이터 중,
              HAVING 절에서 제한 조건을 두어 조건을 만족하는 내용만 출력
            - HAVING 절은 일반적으로 GROUP BY 절 뒤에 위치

2. JOIN
    1) 개념
        - 서로 다른 테이블을 공통 컬럼을 기준으로 합치는(결합하는) 테이블 단위 연산
            - 두개 이상의 테이블을 연결 또는 결합하여 데이터를 출력
            - 여러 테이블에 대한 조인 검색
            - 여러개의 테이블을 연결하여 데이터를 검색하는 것
            - 조인 속성
                조인 검색을 위해 테이블을 연결해주는 속성
        - 조인의 결과 테이블은 이전 테이블의 컬럼 수의 합과 같음
        - SELECT *
          FROM 테이블1 JOIN 테이블2
          ON 테이블1.컬럼명 = 테이블2.컬럼명 ....
        - 조인 시 서로 다른 테이블에 같은 컬럼명이 존재하면
          구분을 위해 테이블명.컬럼명으로 표시
          - 연결하려는 테이블 간에 조인 속성의 이름은 달라도 되지만 도메인은 같아야 함
          - 일반적으로 외래키를 조인 속성으로 이용함
        - FROM 절에 검색에 필요한 모든 테이블 나열
    
    2) 종류
        - 조인 시 NULL값을 허용하지 않는 내부조인
                           허용하는 외부조인으로 구분
        - Inner Join
            - 조인결과: 두개 테이블에 모두 존재하는 행만 남음
            - 동일한 값이 있는 행만 반환
            - 조인 시 null값을 허용하지 않음
            - null값을 가진 레코드는 조인 결과에 빠짐
        - 필요상황
            - 두개 테이블에 조인 키가 빠짐없이 있을 때
        
        - Outer Join
            - join 조건에서 동일한 값이 없는 행도 반환
            - Left Join
                - 조인결과: 왼쪽 테이블을 기준으로
                            오른쪽 테이블을 붙임
                            → 오른쪽 테이블에 조인되는 값이 없는 경우 null로 표기
                - 조인시 join의 왼쪽 테이블의 null값을 포함해서 표시
            - Right Outer 조인 
                - 조인결과: 오른쪽 테이블을 기준으로
                            왼쪽 테이블을 붙임
                            → 왼쪽 테이블에 조인되는 값이 없는 경우 null로 표기
                - 조인시 join의 왼쪽 테이블의 null값을 포함해서 표시

    3) USING 조건절
        - FROM 절의 USING 조건절을 이용
        - 같은 이름을 가진 컬럼들 중에서 원하는 컬럼에 대해서만 선택적으로 조인할 수 있음
       
       ON 조건절
        - 컬럼 명이 다르더라도 JOIN 조건을 사용할 수 있음

3. 부속 질의문을 이용한 검색 (subQuery)
    0) 하나의 SQL문 안에 포함되어 있는 또다른 SQL문
        - 서브 쿼리는 메인 쿼리의 컬럼을 모두 사용
        - 메인 쿼리는 서브 쿼리의 컬럼을 사용할 수 없음
        - 서브 쿼리에서는 ORDER BY 사용 불가
            - ORDER BY절은 메인 쿼리의 마지막 문장에 위치해야 함

    1) SELECT문 안에 또 다른 SELECT문을 포함하는 질의
        - 상위 질의문 (주 질의문)
            - 다른 SELECT문을 포함하는 SELECT문
        - 부속 질의문 (서브 질의문)
            - 다른 SELECT문 안에 들어 잇는 SELECT문
            - 괄호로 묶어서 작성
            - ORDER BY 절 사용할 수 없음
        - 결과 반환 종류
            - 단일 행: 하나의 행을 결과로 반환
            - 다중 행: 하나 이상의 행을 결과로 반환
            - 다중 컬럼: 서브 쿼리의 실행 결과가 여러 컬럼을 반환
                - 서브쿼리와 메인 쿼리의 컬럼수와 컬럼 순서가 동일해야 함
    2) 부속 질의문을 먼저 수행하고, 그 결과를 이용해 상위 질의문을 수행
    3) 부속 질의문과 상위 질의문을 연결하는 연산자가 필요
        - 단일 행 부속 질의문은 비교 연산자 (=, <>, >= <, <=) 사용 가능
             - 서브쿼리의 결과가 반드시 1건 이하
        - 다중 행 부속 질의문은 비교 연산자 사용 불가
            - 사용 가능한 연산자 (다중행 연산자)
                존재하면 TRUE / 존재하지 않으면 FALSE
                IN          : 부속 질의문의 결과 값 중 일치하는 것이 있으면 검색 조건이 참
                              (결과값 중에 있는 것 중에서의 의미, IN은 전체 레코드를 스캔)
                NOT IN      : 부속 질의문의 결과 값 중 일치하는 것이 없으면 검색 조건이 참
                EXISTS      : 부속 질의문의 결과 값이 하나라도 존재하면 검색 조건이 참
                NOT EXISTS  : 부속 질의문의 결과 값이 하나라도 존재하지 않으면 검색 조건이 참
                ALL         : 부속 질의문의 결과 값 모두와 비교한 결과가 참이면 검색 조건을 만족
                              여러개의 레코드의 AND효과  
                              가장 큰 값보다 큰
    4) 스칼라 서브 쿼리
        - SELECT절에서 사용하는 서브 쿼리

    5. 인라인 뷰
        - FROM절 내에 사용하는 서브 쿼리


    6) 서브쿼리가 사용 가능한 위치
        - SELECT절     - FROM절     - WHERE절
        - HAVING절     - ORDER BY절
        - INSERT문의 VALUES절
        - UPDATE문의 SET절
        
4. SQL 함수
    1) DBMS가 제공하는 내장 함수 (built-in function)
        - 단일행 함수
            - 특징
                - SELECT, WHERE, ORDER BY 절에 사용 가능
                - 각 행들에 대해 개별적으로 작용
                    - 각각의 행에 대한 조작 결과를 리턴
                -단 하나의 결과만 리턴
                - 함수의 중첩 가능

            - 문자형 함수
                - 문자를 입력하면 문자나 숫자값 반환
                - LOWER, UPPER, SUBSTR, LENGTH, TRIM..

            - 날짜, 시간 함수
            - 변환형 함수
                - TO_DATE(char, datetime)
                    - 문자형(CHAR) 데이터를 DATE형으로 변환
                - TO_CHAR(date,datetime)
                    - DATE형 데이터를 문자열(VARCHAR2)로 변환
                    - datetme의 주요인자
                        - d:        요일 순서(1~7 월=1)
                        - dd:       1달 중 날짜 (1~31)
                        - ddd:      1년 중 날짜 (1~365)
                        - mm:       월 순서(01~12, January=01)
                        - month:    월 이름(January~December)
                        - yyyy:     4자리 연도
        - 숫자함수
            - 숫자를 입력하면 숫자 값을 반환
            - ABS(숫자): 절대값
            - ROUND(숫자, m): m 자리를 기준으로 숫자 반올림
                             ex) ROUND(5.36, 1) = 5.40
        - 문자 함수 (문자 변환)
            - REPLACE(s1, s2, s3)
                - 대상 문자열(s1)의 지정된 문자(s2)를 원하는 문자(s3)으로 변경
            - NULL 관련 함수
                - NULL을 처리하기 위한 함수
                -  NVL, NULLIF, COALESCE
        - 집계 함수
        - 분석 함수

5. SELECT 문의 실행 순서
1) FROM 절          : 조회 테이블을 참조
2) WHERE 절         : 조회 대상 행을 조회
3) GROUP BY 절      : 대상 행을 그룹화
4) HAVING 절        : 그룹화한 값에서 조건에 맞는 것을 출력
5) SELECT 절        : SELECT 절에 기재한 컬럼이나 식을 계산해 출력
6) ORDER BY 절      : 출력되는 결과 집합을 정렬

6. ORDER BY 정렬
    1)