1. DML (Data Maniplation Language)
    1) 테이블의 데이터를 조작하는 기능
    2) 테이블의 레코드를 CRUD(Create, Retrieve, Update, Delete)
        - ABCD (add, browse, change, delete)
    3) INSERT
       DELETE
       UPDATE
       SELECT

2. 데이터 삽입
    1) 데이터 직접 삽입
        INSERT INTO 테이블이름 [속성]
        VALUES (속성값들)
    2) 데이터 수정
        - UPDATE 테이블이름
          SET 속성이름 = 값1, 속성이름2 = 값2, ...
          [WHERE 조건];

3. SELECT
    1) 기본 검색
        SELECT [ALL | DISTINCT] 속성들
        from 테이블;

            - ALL: 튜플의 중복을 허용하도록 지정
            - DISTINCT: 튜플의 중복을 허용하지 않도록 지정

        - AS 키워드를 이용해 결과 테이블에서 속성의 이름을 바꾸어 출력 가능
            - AS 키워드 생략 가능
        - 산술식을 이용해 검색
            - 산술식: 속성의 이름과 +,-*,/ 등의 산술 연산자와 상수로 구성
            - 속성의 값이 실제로 변경되는 것은 아님
    2) 조건 검색
        - SELECT [ALL | DISTINCT] 속성들
          from 테이블
          [WHERE 조건];
        - WHERE 절에 비교 연산자, 논리 연산자를 이용한 검색 조건 제시
            - 비교 연산자
                =   
                <>  다르다
                <
                >
                <=
                >=
            - 논리 연산자
                AND
                OR
                NOT
        - LIKE 이용한 검색
            - 부분적으로 일치하는 데이터를 검색
            - 문자열을 이용하는 조건에만 LIKE 키워드 사용 가능
            - 함께 사용할 수 있느 기호
                %   0개 이상의 문자 (문자 내용, 개수 상관 없음)
                _   1개의 문자 (문자의 내용은 상관없음)

                ex)
                    like '이젠%'    : '이젠'으로 시작하는 문자열(길이 상관 없음)
                    like '%이젠'    : '이젠'으로 끝나는 문자열(길이 상관 없음)
                    like '%이젠%'   : '이젠'이 포함된 문자열

                    like '이젠___'  : '이젠'으로 시작하는 5자 길이의 문자열
                    
                    like '__이%'    : 3번째 글자가 '이'인 문자열
        
        - null을 이용한 검색
            - is null 키워드를 이용해 특정 속성의 값이 널 값인지를 비교
            - is not null 키워드를 이용해 특정 속성의 값이 널 값이 아닌지를 비교

            - 검색 조건에서 널 값은 다른 값과 비교하면 결과가 모두 거짓이 됨
            
4. WHERE 조건절
    1) 컬럼(colmn)명
        - 보통 조건식의 좌측에 위치
        - 비교 연산자
            - =, >, >=, <, <=
        - SQL 연산자
            - BETWEEN A AND B : A와 B 사이에 있으면 됨
            - IN (LIST)  : 리스트에 있는 값 중 하나라도 있으면 됨
            - LIKE '비교문자열' : 비교문자열 형태와 일치하면 됨 (%, _)
            - IS NULL : 값이 NULL이면 됨
        - 논리 연산자
            - AND
            - OR
            - NOT
        - 부정 비교 연산자
            - !=                        같지않다
            - <>                        같지않다
            - ^=                        같지않다
            NOT 컬럼명 =               ~와 같지않다
            NOT 컬럼명>               ~보다 크지않다
        - 부정 SQL 연산자
            - NOT BETWEEN A AND B : A와 B 사이에 있지않음
            - NOT IN (LIST)  : 리스트에 있는 값 모두 일치하지 않음
            - IS NOT NULL : NULL값이 아님

        - 문자, 숫자, 표현식
            - 보통 조건식의 우측에 위치
        - 비교 컬럼 명
            - JOIN 사용시
    2) 연산자 우선순위
        ① () 괄호
        ② NOT 연산자
        ③ 비교 연산자, SQL 비교 연산자
        ④ AND
        ⑤ OR

    3) 문자유형 비교방법 -- 양쪽 모두 CHAR 타입인 경우
        - 길이가 서로 다르면 작은 쪽에 공백을 추가하여 길이를 같게 함
        - 서로 다른 문자가 나올 때까지 비교
        - 달라진 첫번째 값에 따라 크기를 결정
        - 공백의 수만 다르다면 같은 값으로 결정
    
    4) 문자유형 비교방법 -- 비교연산자 중 한쪽이 VARCHAR 타입인 경우
        - 서로 다른 문자가 나올 때까지 비교
        - 길이가 다르다면 짧은 것이 끝날 때까지만 비교한 후
          길이가 긴 것이 크다고 판단
        - 길이가 같고 다른 것이 없다면 같다고 판단
        - VARCHAR은 공백도 문자로 판단