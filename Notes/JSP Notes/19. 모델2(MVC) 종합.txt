1. 웹 애플리케이션 모델
    1) 애플리케이션 개발시 일반적으로 많이 사용하는 표준화된 소스 구조
    2) 모델의 종류에는 모델1과 모델2가 있음

2. MVC 디자인 패턴
    1) 일반 PC 프로그램 개발에 사용되는 디자인 패턴을 웹 애플리케이션에 도입한 것
    2) 각 기능 분리되어 있어 개발 및 유지보수가 상대적으로 편리

3. 순서
    1) 목록보기
    2) 글쓰기
    3) 상세보기
    4) 파일 다운로드
    5) 삭제하기
    6) 수정하기

4. 게시판 구상
    1) 비회원제 
        - 회원인증 없이 누구나 글을 작성할 수 있음
        - 글쓰기 시 비밀번호 입력이 필수
        - 비밀번호를 통해 수정, 삭제 가능
    2) 자료실
        - 글쓰기 시 파일 첨부
        - 파일 첨부시 정해진 용량 이상 업로드 금지
        - 첨부된 파일 다운로드

    3) 프로세스
              ↓          ←               ←              ←         ←
                                                                   ↑ 
        목록보기화면 -------------> 글쓰기 화면 ---------------> 글쓰기 처리
    (LIstController.java)
         list.jsp)    글쓰기 클릭   (write.jsp)                (WriteController.java)

            ↓ 제목 클릭                 ↓

        상세보기화면 -------------> 수정하기화면 ---------------> 수정 처리
    (ViewController.java            (edit.jsp)   작성완료 클릭   (EditController.java)
        view.jsp)                  파일 다운로드                     ↓
            ↓                  (DownloadController.java)
                                                                    ↓        
            ↓ 삭제 클릭   ←       ←         ←         ←       ←     ←  

        삭제 처리
    (DeleteController.java
        delete.jsp)

    4) 요청명
        - 기능          매핑방법        요청명            컨트롤러(서블릿)        뷰경로
    ------------------------------------------------------------------------------------------
        목록보기        web.xml      /board/list.do       LIstController        /board/list.jsp
        글쓰기          web.xml      /board/write.do      WriteController       /board/write.jsp
        상세보기       애너테이션     /board/view.do       ViewController        /board/view.jsp
        비밀번호검증   애너테이션      /board/pass.do       PassController       /board/pass.jsp
        수정           애너테이션     /board/edit.do       EditController        /board/edit.jsp
        삭제           애너테이션                          PassController        
        다운로드       애너테이션      /board/download.do  DownloadController

5. 페이징 (Paging)
    0) rownum
        - 가상의 컬럼
        - select 쿼리문으로 추출하는 데이터(row)에
          순차적으로 부여되는 순번(num)
        - 컬럼은 만든 적이 없지만 순번이 출력
    
    1) 게시판에서는 목록을 10 ~ 20 개 정도 나눠 출력
        => 이러한 기법을 페이징이라고 함
    
    2) 페이징 처리 위한 두가지 기본 설정값
        - 한 페이지에 출력할 게시물 개수 : 10
        - 한 화면(블록)에 출력할 페이지 번호의 개수 : 5

    3) 페이징 구현
        - 저장된 전체 레코드 수 카운트
        - 각 페이지에서 출력학 게시물 범위 계산
            - 예
                - 현재 1페이지일 때
                    - 시작값: (1-1)*10 + 1 = 1
                    - 종료값: 1 * 10 = 10
                - 현재 2페이지일 때
                    - 시작값: (2-1)*10 + 1 = 11
                    - 종료값: 2 * 10 = 20
            - 계산식
                - 범위의 시작값 : (현재 페이지 - 1) * POSTS_PER_PAGE + 1
                - 범위의 종료값 : (현재 페이지 * POSTS_PER_PAGE)
        
        - 전체 페이지 수 계산
            - 예
                - 게시물 수가 총 105개
                    - 페이지 수 : Math.ceil(105/10) = Math.ceil(10.5) = 11
                    - 계산식
                        - Math.ceil(전체 게시물 수 / POSTS_PER_PAGE)
        
        - 이전 페이지 블록 바로가기 출력 (int)
            - 예
                - 현재 1페이지일 때
                    - pageTemp = ((1-1)/5) * 5 + 1 = 1
                - 현재 5페이지일 때
                    - pageTemp = ((5-1)/5) * 5 + 1 = 5 
                - 현재 6페이지일 때
                    - pageTemp = ((6-1)/5) * 5 + 1 = 6

                    1이 아닐 때는 이전 페이지 블록 바로가기를 출력
                    => pageTemp - 1 결과로 이전 페이지 블록 바로가기 출력
            - 계산식
                - ((현재 페이지 - 1)/PAGES_PER_BLOCK)*PAGES_PER_BLOCK + 1
        - 각 페이지 번호 출력
            - 예
                - pageTemp가 1일 때 : "1, 2, 3, 4, 5" 출력
                - pageTemp가 6일 때 : "6, 7, 8, 9, 10" 출력
        - 다음 페이지 블록 바로가기 출력

6. 컨트롤러(서블릿) 작성 - 글목록

7. 글쓰기
    1) 파일 업로드 추가
    
8. 상세보기

9. 파일 다운로드

10. 삭제하기

11. 수정하기